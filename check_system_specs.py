#!/usr/bin/env python3
"""
System Specification Checker for LPR Server v3
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö spec ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á local machine ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô LPR Server
"""

import os
import sys
import platform
import psutil
import subprocess
import json
import socket
import time
from datetime import datetime
from pathlib import Path

class SystemSpecChecker:
    def __init__(self):
        self.results = {
            'timestamp': datetime.now().isoformat(),
            'system_info': {},
            'hardware_specs': {},
            'software_specs': {},
            'network_specs': {},
            'storage_specs': {},
            'performance_tests': {},
            'recommendations': []
        }
    
    def check_system_info(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
        print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô...")
        
        self.results['system_info'] = {
            'os_name': platform.system(),
            'os_version': platform.version(),
            'os_release': platform.release(),
            'architecture': platform.architecture()[0],
            'machine': platform.machine(),
            'processor': platform.processor(),
            'hostname': platform.node(),
            'python_version': sys.version,
            'python_executable': sys.executable
        }
        
        print(f"   ‚úÖ OS: {self.results['system_info']['os_name']} {self.results['system_info']['os_version']}")
        print(f"   ‚úÖ Architecture: {self.results['system_info']['architecture']}")
        print(f"   ‚úÖ Python: {self.results['system_info']['python_version'].split()[0]}")
    
    def check_hardware_specs(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö spec ‡∏Ç‡∏≠‡∏á hardware"""
        print("\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Hardware Specifications...")
        
        # CPU Information
        cpu_info = {
            'physical_cores': psutil.cpu_count(logical=False),
            'logical_cores': psutil.cpu_count(logical=True),
            'cpu_percent': psutil.cpu_percent(interval=1),
            'cpu_freq': psutil.cpu_freq()._asdict() if psutil.cpu_freq() else None
        }
        
        # Memory Information
        memory = psutil.virtual_memory()
        memory_info = {
            'total_gb': round(memory.total / (1024**3), 2),
            'available_gb': round(memory.available / (1024**3), 2),
            'used_gb': round(memory.used / (1024**3), 2),
            'percent_used': memory.percent,
            'percent_available': 100 - memory.percent
        }
        
        # Disk Information
        disk_info = {}
        for partition in psutil.disk_partitions():
            try:
                usage = psutil.disk_usage(partition.mountpoint)
                disk_info[partition.device] = {
                    'mountpoint': partition.mountpoint,
                    'filesystem': partition.fstype,
                    'total_gb': round(usage.total / (1024**3), 2),
                    'used_gb': round(usage.used / (1024**3), 2),
                    'free_gb': round(usage.free / (1024**3), 2),
                    'percent_used': round((usage.used / usage.total) * 100, 2)
                }
            except PermissionError:
                continue
        
        self.results['hardware_specs'] = {
            'cpu': cpu_info,
            'memory': memory_info,
            'disks': disk_info
        }
        
        print(f"   ‚úÖ CPU: {cpu_info['physical_cores']} physical cores, {cpu_info['logical_cores']} logical cores")
        print(f"   ‚úÖ Memory: {memory_info['total_gb']} GB total, {memory_info['available_gb']} GB available")
        print(f"   ‚úÖ Disks: {len(disk_info)} partitions found")
    
    def check_software_specs(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö software ‡πÅ‡∏•‡∏∞ dependencies"""
        print("\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Software Specifications...")
        
        # Check Python packages
        required_packages = [
            'flask', 'flask_socketio', 'flask_sqlalchemy', 'psutil',
            'requests', 'eventlet', 'python_socketio', 'python_engineio'
        ]
        
        installed_packages = {}
        missing_packages = []
        
        for package in required_packages:
            try:
                import importlib
                module = importlib.import_module(package.replace('-', '_'))
                version = getattr(module, '__version__', 'unknown')
                installed_packages[package] = version
            except ImportError:
                missing_packages.append(package)
        
        # Check system services
        services_status = {}
        services_to_check = ['nginx', 'apache2', 'postgresql', 'mysql', 'redis']
        
        for service in services_to_check:
            try:
                result = subprocess.run(['systemctl', 'is-active', service], 
                                      capture_output=True, text=True, timeout=5)
                services_status[service] = result.stdout.strip()
            except (subprocess.TimeoutExpired, FileNotFoundError):
                services_status[service] = 'not_found'
        
        # Check Docker
        docker_available = False
        try:
            result = subprocess.run(['docker', '--version'], 
                                  capture_output=True, text=True, timeout=5)
            docker_available = result.returncode == 0
        except (subprocess.TimeoutExpired, FileNotFoundError):
            pass
        
        self.results['software_specs'] = {
            'python_packages': installed_packages,
            'missing_packages': missing_packages,
            'system_services': services_status,
            'docker_available': docker_available
        }
        
        print(f"   ‚úÖ Python packages: {len(installed_packages)} installed, {len(missing_packages)} missing")
        print(f"   ‚úÖ Docker: {'Available' if docker_available else 'Not available'}")
    
    def check_network_specs(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö network specifications"""
        print("\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Network Specifications...")
        
        # Network interfaces
        network_interfaces = {}
        for interface, addresses in psutil.net_if_addrs().items():
            for addr in addresses:
                if addr.family == socket.AF_INET:  # IPv4
                    network_interfaces[interface] = {
                        'ip': addr.address,
                        'netmask': addr.netmask,
                        'broadcast': addr.broadcast
                    }
                    break
        
        # Network connections
        try:
            connections = psutil.net_connections()
            active_connections = len([conn for conn in connections if conn.status == 'ESTABLISHED'])
        except PermissionError:
            active_connections = 'permission_denied'
        
        # Port availability check
        ports_to_check = [80, 443, 5000, 8765, 3306, 5432]
        port_status = {}
        
        for port in ports_to_check:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex(('localhost', port))
                sock.close()
                port_status[port] = 'open' if result == 0 else 'closed'
            except Exception:
                port_status[port] = 'error'
        
        # Internet connectivity
        internet_available = False
        try:
            socket.create_connection(("8.8.8.8", 53), timeout=3)
            internet_available = True
        except OSError:
            pass
        
        self.results['network_specs'] = {
            'interfaces': network_interfaces,
            'active_connections': active_connections,
            'port_status': port_status,
            'internet_available': internet_available
        }
        
        print(f"   ‚úÖ Network interfaces: {len(network_interfaces)} found")
        print(f"   ‚úÖ Internet connectivity: {'Available' if internet_available else 'Not available'}")
        print(f"   ‚úÖ Port 8765 (WebSocket): {port_status.get(8765, 'unknown')}")
    
    def check_storage_specs(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö storage specifications"""
        print("\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Storage Specifications...")
        
        # Check storage directories
        storage_paths = {
            'logs': 'logs/',
            'storage': 'storage/',
            'database': 'database/',
            'templates': 'templates/',
            'static': 'web/static/'
        }
        
        storage_status = {}
        for name, path in storage_paths.items():
            full_path = Path(path)
            storage_status[name] = {
                'exists': full_path.exists(),
                'is_dir': full_path.is_dir() if full_path.exists() else False,
                'writable': os.access(full_path, os.W_OK) if full_path.exists() else False,
                'path': str(full_path.absolute())
            }
        
        # Check file permissions
        file_permissions = {}
        important_files = [
            'websocket_server.py',
            'config.py',
            'requirements.txt',
            'run.py'
        ]
        
        for file in important_files:
            file_path = Path(file)
            file_permissions[file] = {
                'exists': file_path.exists(),
                'readable': os.access(file_path, os.R_OK) if file_path.exists() else False,
                'executable': os.access(file_path, os.X_OK) if file_path.exists() else False
            }
        
        self.results['storage_specs'] = {
            'directories': storage_status,
            'files': file_permissions
        }
        
        print(f"   ‚úÖ Storage directories: {len([s for s in storage_status.values() if s['exists']])} found")
        print(f"   ‚úÖ Important files: {len([f for f in file_permissions.values() if f['exists']])} found")
    
    def run_performance_tests(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö performance ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
        print("\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Performance...")
        
        # CPU performance test
        start_time = time.time()
        for _ in range(1000000):
            pass
        cpu_test_time = time.time() - start_time
        
        # Memory performance test
        try:
            test_data = []
            for i in range(100000):
                test_data.append(f"test_string_{i}")
            memory_test_success = True
        except MemoryError:
            memory_test_success = False
        
        # Disk write test
        try:
            test_file = Path("temp_performance_test.txt")
            with open(test_file, 'w') as f:
                f.write("Performance test data" * 1000)
            test_file.unlink()  # Clean up
            disk_test_success = True
        except Exception:
            disk_test_success = False
        
        self.results['performance_tests'] = {
            'cpu_test_time': cpu_test_time,
            'memory_test_success': memory_test_success,
            'disk_test_success': disk_test_success
        }
        
        print(f"   ‚úÖ CPU test: {cpu_test_time:.4f} seconds")
        print(f"   ‚úÖ Memory test: {'Passed' if memory_test_success else 'Failed'}")
        print(f"   ‚úÖ Disk test: {'Passed' if disk_test_success else 'Failed'}")
    
    def generate_recommendations(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö"""
        print("\nüîç ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥...")
        
        recommendations = []
        
        # CPU recommendations
        cpu_cores = self.results['hardware_specs']['cpu']['physical_cores']
        if cpu_cores < 2:
            recommendations.append("‚ö†Ô∏è  ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ CPU ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 cores ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production")
        elif cpu_cores >= 4:
            recommendations.append("‚úÖ CPU cores ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production")
        
        # Memory recommendations
        memory_gb = self.results['hardware_specs']['memory']['total_gb']
        if memory_gb < 4:
            recommendations.append("‚ö†Ô∏è  ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ RAM ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 GB ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production")
        elif memory_gb >= 8:
            recommendations.append("‚úÖ RAM ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production")
        
        # Storage recommendations
        for device, info in self.results['hardware_specs']['disks'].items():
            if info['free_gb'] < 10:
                recommendations.append(f"‚ö†Ô∏è  Disk {device} ‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {info['free_gb']} GB)")
        
        # Software recommendations
        if self.results['software_specs']['missing_packages']:
            recommendations.append(f"‚ö†Ô∏è  ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á packages ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î: {', '.join(self.results['software_specs']['missing_packages'])}")
        
        # Network recommendations
        if not self.results['network_specs']['internet_available']:
            recommendations.append("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï")
        
        if self.results['network_specs']['port_status'].get(8765) == 'open':
            recommendations.append("‚ö†Ô∏è  Port 8765 ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
        
        # Performance recommendations
        if self.results['performance_tests']['cpu_test_time'] > 0.1:
            recommendations.append("‚ö†Ô∏è  CPU performance ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô")
        
        if not self.results['performance_tests']['memory_test_success']:
            recommendations.append("‚ö†Ô∏è  Memory performance ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
        
        if not self.results['performance_tests']['disk_test_success']:
            recommendations.append("‚ö†Ô∏è  Disk performance ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
        
        self.results['recommendations'] = recommendations
        
        for rec in recommendations:
            print(f"   {rec}")
    
    def save_results(self, filename="system_specs_report.json"):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.results, f, indent=2, ensure_ascii=False)
            print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå: {filename}")
        except Exception as e:
            print(f"\n‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")
    
    def print_summary(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"""
        print("\n" + "="*60)
        print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö System Specifications")
        print("="*60)
        
        # System Info
        sys_info = self.results['system_info']
        print(f"\nüñ•Ô∏è  ‡∏£‡∏∞‡∏ö‡∏ö: {sys_info['os_name']} {sys_info['os_version']}")
        print(f"üèóÔ∏è  Architecture: {sys_info['architecture']}")
        print(f"üêç Python: {sys_info['python_version'].split()[0]}")
        
        # Hardware
        hw = self.results['hardware_specs']
        print(f"\nüíª Hardware:")
        print(f"   CPU: {hw['cpu']['physical_cores']} cores ({hw['cpu']['logical_cores']} threads)")
        print(f"   RAM: {hw['memory']['total_gb']} GB ({hw['memory']['available_gb']} GB available)")
        print(f"   Storage: {len(hw['disks'])} partitions")
        
        # Software
        sw = self.results['software_specs']
        print(f"\nüì¶ Software:")
        print(f"   Python packages: {len(sw['python_packages'])} installed")
        print(f"   Missing packages: {len(sw['missing_packages'])}")
        print(f"   Docker: {'Available' if sw['docker_available'] else 'Not available'}")
        
        # Network
        net = self.results['network_specs']
        print(f"\nüåê Network:")
        print(f"   Interfaces: {len(net['interfaces'])}")
        print(f"   Internet: {'Available' if net['internet_available'] else 'Not available'}")
        print(f"   WebSocket port (8765): {net['port_status'].get(8765, 'unknown')}")
        
        # Performance
        perf = self.results['performance_tests']
        print(f"\n‚ö° Performance:")
        print(f"   CPU test: {perf['cpu_test_time']:.4f}s")
        print(f"   Memory test: {'Passed' if perf['memory_test_success'] else 'Failed'}")
        print(f"   Disk test: {'Passed' if perf['disk_test_success'] else 'Failed'}")
        
        # Recommendations
        print(f"\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ({len(self.results['recommendations'])} items):")
        for i, rec in enumerate(self.results['recommendations'], 1):
            print(f"   {i}. {rec}")
        
        # Overall assessment
        critical_issues = len([r for r in self.results['recommendations'] if '‚ö†Ô∏è' in r])
        if critical_issues == 0:
            print(f"\n‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô LPR Server")
        elif critical_issues <= 3:
            print(f"\n‚ö†Ô∏è  ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á {critical_issues} ‡∏à‡∏∏‡∏î")
        else:
            print(f"\n‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á {critical_issues} ‡∏à‡∏∏‡∏î")
    
    def run_all_checks(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö System Specifications ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LPR Server v3")
        print("="*60)
        
        try:
            self.check_system_info()
            self.check_hardware_specs()
            self.check_software_specs()
            self.check_network_specs()
            self.check_storage_specs()
            self.run_performance_tests()
            self.generate_recommendations()
            
            print("\n" + "="*60)
            print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            print("="*60)
            
            self.print_summary()
            self.save_results()
            
        except Exception as e:
            print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {e}")
            import traceback
            traceback.print_exc()

def main():
    """Main function"""
    checker = SystemSpecChecker()
    checker.run_all_checks()

if __name__ == "__main__":
    main()

