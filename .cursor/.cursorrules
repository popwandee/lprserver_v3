{
  "name": "LPR Monorepo: Server + Edge SOP",
  "description": "Monorepo for LPR Server (Flask + Socket.IO + PostgreSQL) and Edge AI Camera (Raspberry Pi + Hailo). This file guides Cursor AI coding style, architecture rules, and workflow.",
  "rules": [
    "Monorepo boundaries: keep application code under server/ and edge/; put reusable scripts/docs under share/.",
    "Avoid cross-imports between server/ and edge/. If sharing code, promote to share/libs/ with a clear API.",
    "No Docker. Provide dev and deploy steps for Linux systemd and venv. Assume sparse-checkout on target machines.",
    "Secrets and config come from .env. Never hardcode secrets or credentials.",
    "Database: SQLAlchemy; prefer PostgreSQL for production. Keep schema changes in server/src/core/models/* and document in share/docs/.",
    "Primary connectivity: WebSocket (Socket.IO). Secondary: REST API. Fallback: MQTT. Do not break payload compatibility.",
    "MQTT topics must follow mqtt_config.py. Respect QoS settings: detection=1, health=0, config=2, control=2.",
    "Keep logging structured and centralized: INFO in prod, DEBUG only in dev. Write to logs/ in dev and journal/syslog in prod.",
    "Preserve file indentation and wrapping. Do not change tabs/spaces or reformat unrelated code.",
    "Write high-verbosity, readable code. Use clear names, guard clauses, and meaningful error handling.",
    "Comment why, not how. No inline commentary inside code to explain actions.",
    "Tests before merge: ensure key scripts run (server tests and basic edge boot).",
    "Use path-scoped commits and PR titles: server:, edge:, share:, docs:.",
    "Favor small, focused edits; ensure green build/run after substantive changes.",
    "Do not introduce new runtime dependencies without documenting installation and adding to requirements.txt (server) or setup_env.sh (edge).",
    "Keep external network addresses configurable (Tailscale hostnames preferred). No hard-coded IPs.",
    "Security: validate inputs, sanitize uploads, enforce SECRET_KEY length, and avoid leaking PII in logs.",
    "Documentation changes belong in share/docs/; keep instruction.md as the single onboarding SOP.",
    "When touching edge code, assume Raspberry Pi OS Bookworm with Hailo SDK; keep single-process gunicorn with threads for camera access.",
    "When touching server code, assume Gunicorn behind Nginx or direct TCP bind in dev; manage via systemd in prod."
  ],
  "technologies": {
    "edge_platform": {
      "hardware": "Raspberry Pi 5 (ARM64)",
      "os": "Raspberry Pi OS Bookworm (Debian-based)",
      "ai_acceleration": "Hailo-8 / Hailo-8L",
      "languages": ["Python 3.10+"],
      "frameworks": ["Hailo TAPPAS", "OpenCV", "NumPy", "Picamera2", "Flask/Gunicorn", "WebSocket", "REST API", "MQTT"],
      "systemd": "Service management for auto-startup"
    },
    "server_platform": {
      "hardware": "x86_64 or ARM64 server",
      "os": "Ubuntu 22.04+/24.04 LTS",
      "languages": ["Python 3.10+"],
      "frameworks": ["Flask", "Flask-SocketIO", "Gunicorn", "Nginx", "SQLAlchemy", "PostgreSQL", "python-dotenv", "systemd", "WebSocket", "REST API", "MQTT"]
    },
    "networking": {
      "vpn": "Tailscale (mesh VPN)",
      "protocols": ["HTTP/HTTPS", "WebSocket", "MQTT"],
      "security": "Tailscale ACLs and authentication; prefer MagicDNS hostnames"
    },
    "development": {
      "ides": ["Cursor"],
      "version_control": "Git; subtree for edge upstream integration",
      "ci_cd": "GitHub Actions (optional)",
      "testing": ["pytest/unittest for server", "manual device validation for edge"],
      "monitoring": ["systemd journal", "Prometheus/Grafana (optional)"]
    }
  },
  "project_structure": {
    "edge": {
      "app": "edge/v1_3/src/",
      "resources": "edge/resources/",
      "docs": "edge/docs/",
      "systemd": "edge/systemd_service/",
      "venv": "edge/venv_hailo/"
    },
    "server": {
      "src": "server/src/",
      "templates": "server/templates/",
      "config": "server/config.py",
      "services": "server/src/services/",
      "models": "server/src/core/models/",
      "nginx": "server/lprserver.conf",
      "systemd": ["server/lprserver.service", "server/lprserver-websocket.service"],
      "scripts": ["server/setup.sh", "server/manage_services.sh"]
    },
    "share": {
      "docs": "share/docs/",
      "tools": "share/tools/",
      "libs": "share/libs/"
    }
  },
  "development_guidelines": {
    "code_style": {
      "python": "PEP8; use Black style formatting (but do not reformat unrelated code); add type hints where valuable",
      "documentation": "Google-style docstrings; keep READMEs current"
    },
    "testing": {
      "server": "Run server/test_* scripts and simple client tests before merging",
      "edge": "Boot the app with gunicorn, validate camera pipeline on device"
    },
    "deployment": {
      "edge": "systemd service with single gunicorn worker and threads; managed by setup_env.sh",
      "server": "systemd + gunicorn (tcp bind or unix socket behind Nginx)",
      "rollback": "Tag releases; keep deploy scripts idempotent"
    },
    "monitoring": {
      "metrics": "Track message throughput, latency; collect edge health",
      "logging": "INFO in prod; include correlation IDs where helpful",
      "alerts": "Critical failures, degraded connectivity"
    }
  },
  "sop": {
    "readme": "instruction.md",
    "key_points": [
      "Use sparse-checkout on machines that only need server/ or edge/.",
      "Configure .env based on server/env.example; never commit secrets.",
      "WebSocket is primary; REST secondary; MQTT fallback with strict topics.",
      "PostgreSQL preferred; align schema via SQLAlchemy models in server/src/core/models/.",
      "Keep edits scoped by path and verify run/test before merging."
    ]
  },
  "assistant_expectations": {
    "citations": "Cite code by filepath and line ranges when quoting. Keep code blocks minimal and focused.",
    "path_focus": "Search and edit only under the relevant path (server/, edge/, share/).",
    "non_docker": "Provide systemd/venv instructions; do not introduce Docker.",
    "indentation": "Preserve existing indentation and wrapping in all edits.",
    "post_change_validation": "Explain how to run or test after edits (commands)."
  }
}