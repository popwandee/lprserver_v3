#!/usr/bin/env python3
"""
Quick System Check for LPR Server v3
‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô LPR Server
"""

import os
import sys
import platform
import psutil
import subprocess
from pathlib import Path

def check_python_version():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python version"""
    version = sys.version_info
    if version.major >= 3 and version.minor >= 8:
        return True, f"‚úÖ Python {version.major}.{version.minor}.{version.micro}"
    else:
        return False, f"‚ùå Python {version.major}.{version.minor}.{version.micro} (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 3.8+)"

def check_memory():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RAM"""
    memory = psutil.virtual_memory()
    total_gb = memory.total / (1024**3)
    available_gb = memory.available / (1024**3)
    
    if total_gb >= 4:
        return True, f"‚úÖ RAM: {total_gb:.1f} GB (Available: {available_gb:.1f} GB)"
    else:
        return False, f"‚ùå RAM: {total_gb:.1f} GB (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 GB)"

def check_cpu():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CPU"""
    cores = psutil.cpu_count(logical=False)
    if cores >= 2:
        return True, f"‚úÖ CPU: {cores} cores"
    else:
        return False, f"‚ùå CPU: {cores} cores (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 cores)"

def check_disk_space():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà disk"""
    try:
        current_dir = Path.cwd()
        usage = psutil.disk_usage(current_dir)
        free_gb = usage.free / (1024**3)
        
        if free_gb >= 10:
            return True, f"‚úÖ Disk space: {free_gb:.1f} GB available"
        else:
            return False, f"‚ùå Disk space: {free_gb:.1f} GB (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 GB)"
    except:
        return False, "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö disk space ‡πÑ‡∏î‡πâ"

def check_required_packages():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python packages ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"""
    required = ['flask', 'flask_socketio', 'psutil', 'requests']
    missing = []
    
    for package in required:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing.append(package)
    
    if not missing:
        return True, f"‚úÖ Required packages: {len(required)} installed"
    else:
        return False, f"‚ùå Missing packages: {', '.join(missing)}"

def check_network_connectivity():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢"""
    try:
        import socket
        socket.create_connection(("8.8.8.8", 53), timeout=3)
        return True, "‚úÖ Internet connectivity available"
    except:
        return False, "‚ùå No internet connectivity"

def check_port_availability():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö port ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"""
    ports = [8765, 5000]  # WebSocket port, Flask port
    available_ports = []
    occupied_ports = []
    
    for port in ports:
        try:
            import socket
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex(('localhost', port))
            sock.close()
            
            if result != 0:  # Port is available
                available_ports.append(port)
            else:
                occupied_ports.append(port)
        except:
            occupied_ports.append(port)
    
    if not occupied_ports:
        return True, f"‚úÖ Required ports available: {available_ports}"
    else:
        return False, f"‚ùå Ports in use: {occupied_ports}"

def check_file_permissions():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö file permissions"""
    important_files = ['websocket_server.py', 'config.py', 'requirements.txt']
    existing_files = []
    missing_files = []
    
    for file in important_files:
        if Path(file).exists():
            existing_files.append(file)
        else:
            missing_files.append(file)
    
    if not missing_files:
        return True, f"‚úÖ Important files: {len(existing_files)} found"
    else:
        return False, f"‚ùå Missing files: {', '.join(missing_files)}"

def check_directory_structure():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö directory structure"""
    required_dirs = ['logs', 'storage', 'templates']
    existing_dirs = []
    missing_dirs = []
    
    for dir_name in required_dirs:
        if Path(dir_name).exists():
            existing_dirs.append(dir_name)
        else:
            missing_dirs.append(dir_name)
    
    if not missing_dirs:
        return True, f"‚úÖ Required directories: {len(existing_dirs)} found"
    else:
        return False, f"‚ùå Missing directories: {', '.join(missing_dirs)}"

def run_quick_check():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß"""
    print("üöÄ Quick System Check for LPR Server v3")
    print("="*50)
    
    checks = [
        ("Python Version", check_python_version),
        ("Memory (RAM)", check_memory),
        ("CPU Cores", check_cpu),
        ("Disk Space", check_disk_space),
        ("Required Packages", check_required_packages),
        ("Network Connectivity", check_network_connectivity),
        ("Port Availability", check_port_availability),
        ("File Permissions", check_file_permissions),
        ("Directory Structure", check_directory_structure)
    ]
    
    results = []
    passed = 0
    total = len(checks)
    
    for check_name, check_func in checks:
        print(f"\nüîç {check_name}...")
        success, message = check_func()
        print(f"   {message}")
        results.append((check_name, success, message))
        if success:
            passed += 1
    
    # Summary
    print("\n" + "="*50)
    print("üìä QUICK CHECK SUMMARY")
    print("="*50)
    print(f"‚úÖ Passed: {passed}/{total}")
    print(f"‚ùå Failed: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô LPR Server!")
        print("üí° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ:")
        print("   python websocket_server.py")
        print("   python test_edge_communication.py")
    elif passed >= total * 0.8:  # 80% or more
        print("\n‚ö†Ô∏è  ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        print("üí° ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    else:
        print("\n‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        print("üí° ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    
    # Failed checks
    failed_checks = [r for r in results if not r[1]]
    if failed_checks:
        print(f"\nüîß Issues to fix:")
        for i, (name, success, message) in enumerate(failed_checks, 1):
            print(f"   {i}. {name}: {message}")
    
    return passed == total

def main():
    """Main function"""
    try:
        success = run_quick_check()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

