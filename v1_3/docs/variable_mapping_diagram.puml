@startuml AI_Camera_v1_3_Variable_Mapping

!theme plain
skinparam backgroundColor #FEFEFE
skinparam noteBackgroundColor #E3F2FD
skinparam noteBorderColor #1976D2
skinparam packageBackgroundColor #F8F9FA
skinparam packageBorderColor #DEE2E6
skinparam classBackgroundColor #FFFFFF
skinparam classBorderColor #6C757D

title AI Camera v1.3 - Variable Mapping & Naming Convention Guide
subtitle Prevent Variable Conflicts & Ensure Consistency

package "Backend Layer (Python)" <<Rectangle>> {
    
    package "API Response Variables (snake_case)" {
        class CameraStatusAPI {
            + success: bool
            + status: dict
            + timestamp: str
            --
            **Camera Status Fields:**
            + initialized: bool
            + streaming: bool
            + frame_count: int
            + average_fps: float
            + uptime: float
            + auto_start_enabled: bool
            --
            **Camera Handler Fields:**
            + camera_handler: dict
            + current_config: dict
            + camera_properties: dict
            --
            **Config Structure:**
            + config.main.size: List[int, int]
            + config.controls.FrameDurationLimits: List[int, int]
            + camera_properties.Model: str
        }
        
        class DetectionStatusAPI {
            + success: bool
            + status: dict
            + timestamp: str
            --
            **Detection Status Fields:**
            + service_running: bool
            + detection_active: bool
            + detection_processor_status: dict
            + detection_interval: float
            + confidence_threshold: float
            + plate_confidence_threshold: float
            + total_detections: int
            + last_detection_time: str
            --
            **Processor Status Fields:**
            + models_loaded: bool
            + vehicle_model_available: bool
            + lp_detection_model_available: bool
            + lp_ocr_model_available: bool
            + easyocr_available: bool
        }
        
        class HealthStatusAPI {
            + success: bool
            + health: dict
            + timestamp: str
            --
            **Health Fields:**
            + overall_status: str
            + components: dict
            --
            **System Health Fields:**
            + cpu_usage: float
            + memory_usage: dict
            + disk_usage: dict
            + uptime: float
            + last_check: str
        }
    }
    
    package "Internal Variables (snake_case)" {
        class CameraHandlerVars {
            **Private Attributes:**
            - _instance: Optional[CameraHandler]
            - _lock: threading.Lock
            - picam2: Optional[Picamera2]
            - initialized: bool
            - streaming: bool
            - current_config: Optional[Dict]
            - camera_properties: Dict
            - frame_count: int
            - startup_time: float
            --
            **Method Parameters:**
            + config: Dict
            + resolution: Tuple[int, int]
            + framerate: int
            + brightness: float
            + contrast: float
            + saturation: float
            + awb_mode: str
        }
        
        class DetectionProcessorVars {
            **Private Attributes:**
            - model_path: str
            - confidence_threshold: float
            - detection_interval: float
            - models_loaded: bool
            - vehicle_model_available: bool
            - lp_detection_model_available: bool
            - lp_ocr_model_available: bool
            - easyocr_available: bool
            --
            **Method Parameters:**
            + frame: np.ndarray
            + detection_results: List[Dict]
            + bbox_coordinates: List[int]
            + license_plate_text: str
        }
        
        class ServiceManagerVars {
            **Camera Manager:**
            - camera_handler: CameraHandler
            - auto_start_enabled: bool
            - startup_time: datetime
            - logger: Logger
            --
            **Detection Manager:**
            - detection_processor: DetectionProcessor
            - camera_manager: CameraManager
            - database_manager: DatabaseManager
            - service_running: bool
            - detection_active: bool
            --
            **WebSocket Sender:**
            - socketio: SocketIO
            - connected_clients: Dict[str, Dict]
            - logger: Logger
        }
    }
}

package "Frontend Layer (JavaScript)" <<Rectangle>> {
    
    package "API Request Variables (camelCase)" {
        class CameraStatusJS {
            **Received from API (converted):**
            + success: boolean
            + status: object
            + timestamp: string
            --
            **Camera Status (camelCase):**
            + initialized: boolean
            + streaming: boolean
            + frameCount: number
            + averageFps: number
            + uptime: number
            + autoStartEnabled: boolean
            --
            **Camera Handler (camelCase):**
            + cameraHandler: object
            + currentConfig: object
            + cameraProperties: object
            --
            **Config Access:**
            + status.cameraHandler.currentConfig.main.size
            + status.cameraHandler.currentConfig.controls.FrameDurationLimits
            + status.cameraHandler.cameraProperties.Model
        }
        
        class DetectionStatusJS {
            **Received from API (converted):**
            + success: boolean
            + status: object
            + timestamp: string
            --
            **Detection Status (camelCase):**
            + serviceRunning: boolean
            + detectionActive: boolean
            + detectionProcessorStatus: object
            + detectionInterval: number
            + confidenceThreshold: number
            + plateConfidenceThreshold: number
            + totalDetections: number
            + lastDetectionTime: string
            --
            **Processor Status (camelCase):**
            + modelsLoaded: boolean
            + vehicleModelAvailable: boolean
            + lpDetectionModelAvailable: boolean
            + lpOcrModelAvailable: boolean
            + easyocrAvailable: boolean
        }
    }
    
    package "UI State Variables (camelCase)" {
        class DashboardStateVars {
            **Element References:**
            + resolutionElement: HTMLElement
            + fpsElement: HTMLElement
            + modelElement: HTMLElement
            + featureResolutionElement: HTMLElement
            + featureFpsElement: HTMLElement
            + featureModelElement: HTMLElement
            --
            **Display Values:**
            + cameraStatusText: string
            + cameraStatusClass: string
            + isStreaming: boolean
            + isConfiguring: boolean
            + systemUptime: string
            --
            **Update Intervals:**
            + statusUpdateInterval: number
            + refreshTimer: NodeJS.Timer
        }
        
        class WebSocketVars {
            **Connection Management:**
            + socket: Socket
            + isConnected: boolean
            + reconnectAttempts: number
            + maxReconnectAttempts: number
            --
            **Event Handlers:**
            + onCameraStatusUpdate: Function
            + onDetectionStatusUpdate: Function
            + onSystemHealthUpdate: Function
            + onConnectionError: Function
            --
            **Event Data:**
            + eventData: object
            + responseData: object
            + errorInfo: object
        }
    }
    
    package "Utility Functions (camelCase)" {
        class AICameraUtilsVars {
            **Function Parameters:**
            + elementId: string
            + containerId: string
            + message: string
            + messageType: string
            + timestamp: string
            + isOnline: boolean
            + statusText: string
            --
            **API Request:**
            + apiUrl: string
            + requestOptions: object
            + responseData: object
            + errorMessage: string
            --
            **Formatting:**
            + formattedDateTime: string
            + formattedDuration: string
            + formattedFileSize: string
        }
    }
}

package "HTML Template Layer" <<Rectangle>> {
    
    package "Element IDs (kebab-case)" {
        class MainDashboardElements {
            **System Information Section:**
            + main-camera-model
            + main-camera-resolution
            + main-camera-fps
            + main-camera-detail-status
            + main-system-uptime
            --
            **Features Section:**
            + feature-camera-model
            + feature-camera-resolution  
            + feature-camera-fps
            + main-camera-feature-status
            --
            **Status Indicators:**
            + main-camera-status
            + main-detection-status
            + main-database-status
            + main-database-detail-status
            --
            **Log Containers:**
            + main-system-log
            + detection-log
            + health-log
        }
        
        class CameraDashboardElements {
            **Camera Control:**
            + camera-start-btn
            + camera-stop-btn
            + camera-restart-btn
            + camera-capture-btn
            --
            **Configuration Form:**
            + camera-resolution-select
            + camera-framerate-input
            + camera-brightness-input
            + camera-contrast-input
            + camera-saturation-input
            + camera-awb-select
            --
            **Status Display:**
            + camera-status-indicator
            + camera-stream-container
            + camera-config-display
        }
        
        class DetectionDashboardElements {
            **Detection Control:**
            + detection-start-btn
            + detection-stop-btn
            + detection-configure-btn
            --
            **Configuration:**
            + detection-interval-input
            + confidence-threshold-input
            + plate-confidence-input
            + save-images-checkbox
            + save-database-checkbox
            --
            **Results Display:**
            + detection-results-table
            + detection-count-display
            + detection-log-container
        }
    }
    
    package "CSS Classes (kebab-case)" {
        class StatusClasses {
            **Status Indicators:**
            + status-online
            + status-offline
            + status-warning
            + status-error
            --
            **Card Styles:**
            + card-primary
            + card-success
            + card-warning
            + card-danger
            --
            **Button States:**
            + btn-active
            + btn-disabled
            + btn-loading
        }
    }
}

package "WebSocket Events" <<Rectangle>> {
    
    package "Event Names (snake_case)" {
        class ClientToServerEvents {
            **Camera Events:**
            + camera_status_request
            + camera_control
            + camera_config_update
            --
            **Detection Events:**
            + detection_status_request
            + detection_control
            + detection_config_update
            --
            **System Events:**
            + system_health_request
            + system_log_request
        }
        
        class ServerToClientEvents {
            **Camera Events:**
            + camera_status_update
            + camera_control_response
            + camera_config_response
            --
            **Detection Events:**
            + detection_status_update
            + detection_result
            + detection_control_response
            --
            **System Events:**
            + system_health_update
            + system_notification
        }
    }
    
    package "Event Data Structures" {
        class CameraEventData {
            **Control Commands:**
            + command: 'start' | 'stop' | 'restart' | 'capture'
            + success: boolean
            + message: string
            + error: string | null
            --
            **Config Updates:**
            + config: object
            + resolution: [number, number]
            + framerate: number
            + brightness: number
            + contrast: number
        }
        
        class DetectionEventData {
            **Control Commands:**
            + command: 'start' | 'stop'
            + success: boolean
            + message: string
            --
            **Detection Results:**
            + timestamp: string
            + detections: Array<object>
            + image_path: string
            + confidence: number
            + bbox: [number, number, number, number]
        }
    }
}

' Mapping Relationships
CameraStatusAPI ..> CameraStatusJS : "API Response\nsnake_case → camelCase"
DetectionStatusAPI ..> DetectionStatusJS : "API Response\nsnake_case → camelCase"
HealthStatusAPI ..> DashboardStateVars : "System Health Data"

CameraHandlerVars ..> CameraStatusAPI : "Internal State → API"
DetectionProcessorVars ..> DetectionStatusAPI : "Internal State → API"
ServiceManagerVars ..> CameraStatusAPI : "Service Layer → API"

CameraStatusJS ..> DashboardStateVars : "API Data → UI State"
DetectionStatusJS ..> DashboardStateVars : "API Data → UI State"

DashboardStateVars ..> MainDashboardElements : "State → DOM Elements"
WebSocketVars ..> MainDashboardElements : "Events → DOM Updates"

ClientToServerEvents ..> ServerToClientEvents : "WebSocket Communication"
CameraEventData ..> DetectionEventData : "Event Data Exchange"

note top of CameraStatusAPI
  **Backend API Response Format**
  - Uses snake_case naming
  - Nested objects for complex data
  - Timestamp in ISO format
  - Boolean success indicator
  
  **Key Paths:**
  - status.camera_handler.current_config.main.size
  - status.camera_handler.camera_properties.Model
  - status.camera_handler.current_config.controls.FrameDurationLimits
end note

note top of CameraStatusJS
  **Frontend Variable Conversion**
  - Converts snake_case to camelCase
  - Maintains object structure
  - Preserves data types
  - Handles nested properties
  
  **JavaScript Access:**
  - status.cameraHandler.currentConfig.main.size
  - status.cameraHandler.cameraProperties.Model
  - status.cameraHandler.currentConfig.controls.FrameDurationLimits
end note

note bottom of MainDashboardElements
  **HTML Element ID Convention**
  - Uses kebab-case for consistency
  - Prefixed by section (main-, feature-, camera-, detection-)
  - Descriptive and unique
  - Prevents duplicate ID conflicts
  
  **Examples:**
  - main-camera-model vs feature-camera-model
  - main-camera-resolution vs feature-camera-resolution
  - Separate IDs for same data in different sections
end note

note right of ClientToServerEvents
  **WebSocket Event Naming**
  - Uses snake_case for event names
  - Descriptive action-based naming
  - Consistent request/response pattern
  - Clear client/server direction
  
  **Pattern:**
  - {component}_{action}_request
  - {component}_{action}_response
  - {component}_{data}_update
end note

note left of StatusClasses
  **CSS Class Naming**
  - Uses kebab-case convention
  - Semantic naming (status-online)
  - Bootstrap-compatible
  - Consistent state representation
  
  **State Mapping:**
  - online → status-online (green)
  - offline → status-offline (red)  
  - warning → status-warning (yellow)
  - error → status-error (red)
end note

@enduml
