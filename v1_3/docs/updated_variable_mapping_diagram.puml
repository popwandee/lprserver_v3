@startuml AI_Camera_v1.3_Variable_Mapping_Diagram

!theme plain
skinparam packageFontSize 12
skinparam noteFontSize 10

package "Backend Layer (Python - snake_case)" {
    
    class "Frame Data Variables" as FrameData {
        frame_data: Dict = {
            'frame': numpy.ndarray,
            'metadata': dict,
            'timestamp': float
        }
        --
        frame_validation: Dict = {
            'is_valid': bool,
            'frame_type': str,
            'frame_shape': list,
            'frame_size': int,
            'validation_errors': list
        }
    }
    
    class "Camera Status Variables" as CameraStatus {
        camera_status: Dict = {
            'initialized': bool,
            'streaming': bool,
            'frame_count': int,
            'average_fps': float,
            'auto_start_enabled': bool,
            'auto_streaming_enabled': bool
        }
    }
    
    class "Detection Status Variables" as DetectionStatus {
        detection_status: Dict = {
            'active': bool,
            'auto_start_enabled': bool,
            'detection_count': int,
            'processing_time': float,
            'last_detection': str
        }
    }
    
    class "Auto-Startup Config Variables" as AutoConfig {
        auto_startup_config: Dict = {
            'auto_start_camera': bool,
            'auto_start_streaming': bool,
            'auto_start_detection': bool,
            'startup_delay': float,
            'startup_sequence': list
        }
    }
    
    class "Error Variables" as ErrorVars {
        frame_errors: Dict = {
            'invalid_type': str,
            'empty_frame': str,
            'missing_frame_key': str,
            'validation_failed': str
        }
        --
        attribute_errors: Dict = {
            'missing_attributes': list,
            'type_errors': list,
            'access_errors': list
        }
    }
    
    class "Health Monitor Variables" as HealthVars {
        health_status: Dict = {
            'overall_status': str,  # "healthy", "unhealthy", "critical", "unknown"
            'components': dict,
            'system': dict,
            'last_check': str
        }
        --
        component_status: Dict = {
            'camera': {
                'status': str,
                'initialized': bool,
                'streaming': bool,
                'frame_count': int,
                'average_fps': float,
                'uptime': int,
                'auto_start_enabled': bool
            },
            'detection': {
                'status': str,
                'models_loaded': bool,
                'easyocr_available': bool,
                'detection_active': bool,
                'auto_start': bool
            },
            'database': {
                'status': str,
                'connected': bool,
                'database_path': str
            },
            'system': {
                'status': str,
                'last_check': str
            }
        }
        --
        system_resources: Dict = {
            'cpu_usage': float,
            'cpu_count': int,
            'memory_usage': {
                'used': float,
                'total': float,
                'percentage': float
            },
            'disk_usage': {
                'used': float,
                'total': float,
                'percentage': float
            },
            'uptime': float
        }
    }
}

package "API Response Layer (JSON)" {
    
    class "Standard Response Format" as APIResponse {
        response_format: Dict = {
            'success': bool,
            'status': dict,
            'message': str,
            'timestamp': str
        }
        --
        error_response: Dict = {
            'success': bool,
            'error': str,
            'error_code': str,
            'timestamp': str
        }
    }
    
    class "WebSocket Events" as WSEvents {
        camera_status_update: Dict = {
            'initialized': bool,
            'streaming': bool,
            'frame_count': int,
            'average_fps': float,
            'auto_start_enabled': bool
        }
        --
        detection_status_update: Dict = {
            'active': bool,
            'auto_start_enabled': bool,
            'detection_count': int,
            'processing_time': float
        }
        --
        health_status_update: Dict = {
            'overall_status': str,
            'components': dict,
            'system': dict,
            'last_check': str
        }
    }
}

package "Frontend Layer (JavaScript - camelCase)" {
    
    class "Frame Data Variables" as FrontendFrame {
        frameData: Object = {
            frame: ImageData,
            metadata: object,
            timestamp: number
        }
        --
        frameValidation: Object = {
            isValid: boolean,
            frameType: string,
            frameShape: array,
            frameSize: number,
            validationErrors: array
        }
    }
    
    class "Camera Status Variables" as FrontendCamera {
        cameraStatus: Object = {
            initialized: boolean,
            streaming: boolean,
            frameCount: number,
            averageFps: number,
            autoStartEnabled: boolean,
            autoStreamingEnabled: boolean
        }
    }
    
    class "Detection Status Variables" as FrontendDetection {
        detectionStatus: Object = {
            active: boolean,
            autoStartEnabled: boolean,
            detectionCount: number,
            processingTime: number,
            lastDetection: string
        }
    }
    
    class "Auto-Startup Config Variables" as FrontendAuto {
        autoStartupConfig: Object = {
            cameraAutoStart: boolean,
            streamingAutoStart: boolean,
            detectionAutoStart: boolean,
            startupDelay: number,
            startupSequence: array
        }
    }
    
    class "Error State Variables" as FrontendErrors {
        errorStates: Object = {
            frameValidation: {
                hasError: boolean,
                errorType: string,
                errorMessage: string,
                lastOccurred: Date
            },
            attributeAccess: {
                hasError: boolean,
                missingAttribute: string,
                serviceName: string,
                errorMessage: string
            },
            autoStartup: {
                hasError: boolean,
                failedPhase: string,
                errorMessage: string,
                retryAttempts: number
            }
        }
    }
    
    class "Health Monitor Variables" as FrontendHealth {
        healthStatus: Object = {
            overallStatus: string,  // "healthy", "unhealthy", "critical", "unknown"
            componentStatus: {
                camera: {
                    status: string,
                    initialized: boolean,
                    streaming: boolean,
                    frameCount: number,
                    averageFps: number,
                    uptime: number,
                    autoStartEnabled: boolean
                },
                detection: {
                    status: string,
                    modelsLoaded: boolean,
                    easyocrAvailable: boolean,
                    detectionActive: boolean,
                    autoStart: boolean
                },
                database: {
                    status: string,
                    connected: boolean,
                    databasePath: string
                },
                system: {
                    status: string,
                    lastCheck: string
                }
            },
            systemResources: {
                cpuUsage: number,
                cpuCount: number,
                memoryUsage: {
                    used: number,
                    total: number,
                    percentage: number
                },
                diskUsage: {
                    used: number,
                    total: number,
                    percentage: number
                },
                uptime: number
            }
        }
    }
}

' Variable Mapping Relationships
FrameData --> APIResponse : frame_data → status
CameraStatus --> APIResponse : camera_status → status
DetectionStatus --> APIResponse : detection_status → status
AutoConfig --> APIResponse : config → status
ErrorVars --> APIResponse : errors → error_response
HealthVars --> APIResponse : health_status → data

APIResponse --> FrontendFrame : JSON → frameData
APIResponse --> FrontendCamera : JSON → cameraStatus  
APIResponse --> FrontendDetection : JSON → detectionStatus
APIResponse --> FrontendAuto : JSON → autoStartupConfig
APIResponse --> FrontendErrors : JSON → errorStates
APIResponse --> FrontendHealth : JSON → healthStatus

WSEvents --> FrontendCamera : WebSocket → cameraStatus
WSEvents --> FrontendDetection : WebSocket → detectionStatus
WSEvents --> FrontendHealth : WebSocket → healthStatus

' Data Flow Notes
note top of FrameData : "Frame Data Flow:\n1. CameraHandler returns Dict\n2. CameraManager extracts numpy.ndarray\n3. DetectionProcessor validates frame\n4. Results sent via WebSocket/HTTP"

note top of APIResponse : "API Response Transformation:\n1. snake_case (Python) → JSON\n2. Consistent response format\n3. Error handling standards\n4. Timestamp normalization"

note top of FrontendFrame : "Frontend Variable Conversion:\n1. JSON → camelCase (JavaScript)\n2. Type safety validation\n3. UI state management\n4. Error display handling"

note top of FrontendHealth : "Health Monitor Frontend:\n1. Status indicators (healthy/unhealthy/critical)\n2. Component-specific metrics\n3. System resource monitoring\n4. Real-time updates via WebSocket"

' Error Prevention Flow
note bottom of ErrorVars : "Error Prevention:\n1. Frame type validation\n2. Attribute access safety\n3. Service dependency checks\n4. Configuration validation"

note bottom of FrontendErrors : "Frontend Error Handling:\n1. Error state management\n2. User feedback display\n3. Retry mechanisms\n4. Fallback values"

note bottom of HealthVars : "Health Monitor Backend:\n1. Component health checks\n2. System resource monitoring\n3. Database logging\n4. Status aggregation"

' Auto-Startup Sequence
note right of AutoConfig : "Auto-Startup Mapping:\n1. Backend config flags\n2. Service initialization order\n3. Frontend status tracking\n4. Error recovery handling"

@enduml
